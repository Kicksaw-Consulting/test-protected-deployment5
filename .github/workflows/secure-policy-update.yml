name: Secure Policy Update

on:
  workflow_call:
    inputs:
      policy_file_path:
        required: true
        type: string
      policy_name:
        required: true
        type: string
      assume_role:
        required: true
        type: string

jobs:
  approval:
    name: Require manual approval
    runs-on: ubuntu-latest
    steps:
      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: RkSinghDeo  # Comma-separated list of GitHub usernames
          minimum-approvals: 1
          issue-title: 'Manual Approval Required - Secure Policy Update'
          issue-body: |
            Secure Policy Update is pending manual approval.
            
            - Policy Name: ${{ inputs.policy_name }}
            - Policy File Path: ${{ inputs.policy_file_path }}

  policy-update:
    name: Update IAM Policy
    runs-on: ubuntu-latest
    needs: [approval]  # Wait for approval first
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:role/${{ inputs.assume_role }}

      - name: Create or update IAM policy
        run: |
          POLICY_NAME="${{ inputs.policy_name }}"
          POLICY_ARN="arn:aws:iam::${{ vars.AWS_ACCOUNT_ID }}:policy/${POLICY_NAME}"

          echo "Applying policy: $POLICY_NAME"
          echo "Using policy file: ${{ inputs.policy_file_path }}"

          if aws iam get-policy --policy-arn "$POLICY_ARN" >/dev/null 2>&1; then
            echo "Policy exists. Checking version count..."
            TOTAL_VERSIONS=$(aws iam list-policy-versions --policy-arn "$POLICY_ARN" --query "length(Versions)" --output text)
            echo "Total versions: $TOTAL_VERSIONS"

            if [ "$TOTAL_VERSIONS" -ge 5 ]; then
              echo "Deleting oldest non-default version..."
              VERSION_TO_DELETE=$(aws iam list-policy-versions --policy-arn "$POLICY_ARN" --query "Versions[?IsDefaultVersion==\`false\`]|[0].VersionId" --output text)
              aws iam delete-policy-version --policy-arn "$POLICY_ARN" --version-id "$VERSION_TO_DELETE"
            fi

            echo "Creating new policy version and setting as default..."
            aws iam create-policy-version --policy-arn "$POLICY_ARN" --policy-document file://${{ inputs.policy_file_path }} --set-as-default
          else
            echo "Policy does not exist. Creating policy..."
            aws iam create-policy --policy-name "$POLICY_NAME" --policy-document file://${{ inputs.policy_file_path }}
          fi